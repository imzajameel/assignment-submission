{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "2af75e73-bf7c-4611-a60d-6082a9980a86",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "list  containing only int values of my_list :   [1, 2, 3, 4]\n",
      "list containing only string values of my_list :  ['DS', 'ML', 'Python']\n",
      "list containing only nested lists of my_list:  [[5, 6, 7, 8], [11, 22, 33]]\n"
     ]
    }
   ],
   "source": [
    "my_list = [1,2,3,4,[5,6,7,8],'DS','ML','Python',[11,22,33]]\n",
    "#separate the same same types of values in different lists\n",
    "int_list = []\n",
    "nested_list = []\n",
    "string_list = []\n",
    "for i in my_list :\n",
    "    if type(i) == int :\n",
    "        int_list.append(i)\n",
    "    elif type(i) == str :\n",
    "        string_list.append(i)\n",
    "    elif type(i)  == list :\n",
    "        nested_list.append(i)\n",
    "    else :\n",
    "        pass\n",
    "print('list  containing only int values of my_list :  ', int_list)\n",
    "print('list containing only string values of my_list : ' , string_list)\n",
    "print('list containing only nested lists of my_list: ' , nested_list)\n",
    "        \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "53c7b043-39d7-4448-80c0-0a1e741fef14",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
